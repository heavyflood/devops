1. Kubectl 자동완성
source <(kubectl completion bash) # bash-completion 패키지를 먼저 설치한 후, bash의 자동 완성을 현재 셸에 설정한다
echo "source <(kubectl completion bash)" >> ~/.bashrc # 자동 완성을 bash 셸에 영구적으로 추가한다

2. Kubectl 컨텍스트
kubectl config view # 병합된 kubeconfig 설정을 표시한다.

# 동시에 여러 kubeconfig 파일을 사용하고 병합된 구성을 확인한다
KUBECONFIG=~/.kube/config:~/.kube/kubconfig2

kubectl config view

# e2e 사용자의 암호를 확인한다
kubectl config view -o jsonpath='{.users[?(@.name == "e2e")].user.password}'

kubectl config view -o jsonpath='{.users[].name}'    # 사용자 리스트 조회
kubectl config get-contexts                          # 컨텍스트 리스트 출력
kubectl config current-context              # 현재 컨텍스트 출력
kubectl config use-context my-cluster-name  # my-cluster-name를 기본 컨텍스트로 설정

# 기본 인증을 지원하는 새로운 클러스터를 kubeconf에 추가한다
kubectl config set-credentials kubeuser/foo.kubernetes.com --username=kubeuser --password=kubepassword

# 해당 컨텍스트에서 모든 후속 kubectl 커맨드에 대한 네임스페이스를 영구적으로 저장한다
kubectl config set-context --current --namespace=ggckad-s2

# 특정 사용자와 네임스페이스를 사용하는 컨텍스트 설정
kubectl config set-context gce --user=cluster-admin --namespace=foo \
  && kubectl config use-context gce

kubectl config unset users.foo                       # foo 사용자 삭제

3. 오브젝트 생성
# kubectl apply를 실행하여 클러스터에 리소스를 생성하고 업데이트
kubectl apply -f ./my-manifest.yaml           # 리소스(들) 생성
kubectl apply -f ./my1.yaml -f ./my2.yaml     # 여러 파일로 부터 생성
kubectl apply -f ./dir                        # dir 내 모든 매니페스트 파일에서 리소스(들) 생성
kubectl apply -f https://git.io/vPieo         # url로부터 리소스(들) 생성
kubectl create deployment nginx --image=nginx  # nginx 단일 인스턴스를 시작
kubectl explain pods,svc                       # 파드와 서비스 매니페스트 문서를 조회

# stdin으로 다수의 YAML 오브젝트 생성
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: busybox-sleep
spec:
  containers:
  - name: busybox
    image: busybox
    args:
    - sleep
    - "1000000"
---
apiVersion: v1
kind: Pod
metadata:
  name: busybox-sleep-less
spec:
  containers:
  - name: busybox
    image: busybox
    args:
    - sleep
    - "1000"
EOF

# 여러 개의 키로 시크릿 생성
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  password: $(echo -n "s33msi4" | base64 -w0)
  username: $(echo -n "jane" | base64 -w0)
EOF

4. 리소스 조회
# 기본 출력을 위한 Get 커맨드
kubectl get services                          # 네임스페이스 내 모든 서비스의 목록 조회
kubectl get pods --all-namespaces             # 모든 네임스페이스 내 모든 파드의 목록 조회
kubectl get pods -o wide                      # 네임스페이스 내 모든 파드의 상세 목록 조회
kubectl get deployment my-dep                 # 특정 디플로이먼트의 목록 조회
kubectl get pods --include-uninitialized      # 초기화되지 않은 것을 포함하여 네임스페이스 내 모든 파드의 목록 조회
kubectl get pod my-pod -o yaml                # 파드의 YAML 조회
kubectl get pod my-pod -o yaml --export       # 클러스터 명세 없이 파드의 YAML 조회

# 상세 출력을 위한 Describe 커맨드
kubectl describe nodes my-node
kubectl describe pods my-pod

kubectl get services --sort-by=.metadata.name # Name으로 정렬된 서비스의 목록 조회

# 재시작 횟수로 정렬된 파드의 목록 조회
kubectl get pods --sort-by='.status.containerStatuses[0].restartCount'

# test 네임스페이스 내 파드 목록을 용량으로 정렬해서 조회

kubectl get pods -n test --sort-by=.spec.capacity.storage

# app=cassandra 레이블을 가진 모든 파드의 레이블 버전 조회
kubectl get pods --selector=app=cassandra -o \
  jsonpath='{.items[*].metadata.labels.version}'

# 모든 워커 노드 조회 (셀렉터를 사용하여 'node-role.kubernetes.io/master'
# 으로 명명된 라벨의 결과를 제외)
kubectl get node --selector='!node-role.kubernetes.io/master'

# 네임스페이스의 모든 실행 중인 파드를 조회
kubectl get pods --field-selector=status.phase=Running

# 모든 노드의 외부IP를 조회
kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}'

# 특정 RC에 속해있는 파드 이름의 목록 조회
# "jq" 커맨드는 jsonpath를 사용하는 매우 복잡한 변환에 유용하다. https://stedolan.github.io/jq/ 에서 확인할 수 있다.
sel=${$(kubectl get rc my-rc --output=json | jq -j '.spec.selector | to_entries | .[] | "\(.key)=\(.value),"')%?}
echo $(kubectl get pods --selector=$sel --output=jsonpath={.items..metadata.name})

# 모든 파드(또는 레이블을 지원하는 다른 쿠버네티스 오브젝트)의 레이블 조회
# 마찬가지로 "jq"를 사용
for item in $( kubectl get pod --output=name); do printf "Labels for %s\n" "$item" | grep --color -E '[^/]+$' && kubectl get "$item" --output=json | jq -r -S '.metadata.labels | to_entries | .[] | " \(.key)=\(.value)"' 2>/dev/null; printf "\n"; done

# 혹은 이 명령어를 파드와 연관된 모든 레이블을 조회하는데 사용할 수 있다.
kubectl get pods --show-labels

# 어떤 노드가 준비됐는지 확인
JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}' \
 && kubectl get nodes -o jsonpath="$JSONPATH" | grep "Ready=True"

# 파드에 의해 현재 사용되고 있는 모든 시크릿 목록 조회
kubectl get pods -o json | jq '.items[].spec.containers[].env[]?.valueFrom.secretKeyRef.name' | grep -v null | sort | uniq

# 타임스탬프로 정렬된 이벤트 목록 조회
kubectl get events --sort-by=.metadata.creationTimestamp

5. 리소스 업데이트
kubectl set image deployment/frontend www=image:v2               # "frontend" 디플로이먼트의 "www" 컨테이너 이미지를 업데이트하는 롤링 업데이트
kubectl rollout history deployment/frontend                      # 현 리비전을 포함한 디플로이먼트의 이력을 체크 
kubectl rollout undo deployment/frontend                         # 이전 디플로이먼트로 롤백
kubectl rollout undo deployment/frontend --to-revision=2         # 특정 리비전으로 롤백
kubectl rollout status -w deployment/frontend                    # 완료될 때까지 "frontend" 디플로이먼트의 롤링 업데이트 상태를 감시


# 버전 1.11 부터 사용 중단
kubectl rolling-update frontend-v1 -f frontend-v2.json           # (사용중단) frontend-v1 파드의 롤링 업데이트
kubectl rolling-update frontend-v1 frontend-v2 --image=image:v2  # (사용중단) 리소스 이름 변경과 이미지 업데이트
kubectl rolling-update frontend --image=image:v2                 # (사용중단) 프론트엔드의 파드 이미지 업데이트
kubectl rolling-update frontend-v1 frontend-v2 --rollback        # (사용중단) 진행중인 기존 롤아웃 중단

cat pod.json | kubectl replace -f -                              # std로 전달된 JSON을 기반으로 파드 교체

# 리소스를 강제 교체, 삭제 후 재생성함. 이것은 서비스를 중단시킴.
kubectl replace --force -f ./pod.json

# 복제된 nginx를 위한 서비스를 생성한다. 80 포트로 서비스하고, 컨테이너는 8000 포트로 연결한다.
kubectl expose rc nginx --port=80 --target-port=8000

# 단일-컨테이너 파드의 이미지 버전(태그)을 v4로 업데이트
kubectl get pod mypod -o yaml | sed 's/\(image: myimage\):.*$/\1:v4/' | kubectl replace -f -

kubectl label pods my-pod new-label=awesome                      # 레이블 추가
kubectl annotate pods my-pod icon-url=http://goo.gl/XXBTWq       # 어노테이션 추가
kubectl autoscale deployment foo --min=2 --max=10                # 디플로이먼트 "foo" 오토스케일

6. 리소스 패치
kubectl patch node k8s-node-1 -p '{"spec":{"unschedulable":true}}' # 노드를 부분적으로 업데이트

# 컨테이너의 이미지를 업데이트. 병합(merge) 키이므로, spec.containers[*].name이 필요.
kubectl patch pod valid-pod -p '{"spec":{"containers":[{"name":"kubernetes-serve-hostname","image":"new image"}]}}'

# 위치 배열을 이용한 json 패치를 사용하여, 컨테이너의 이미지를 업데이트.
kubectl patch pod valid-pod --type='json' -p='[{"op": "replace", "path": "/spec/containers/0/image", "value":"new image"}]'

# 위치 배열을 이용한 json 패치를 사용하여 livenessProbe 디플로이먼트 비활성화.
kubectl patch deployment valid-deployment  --type json   -p='[{"op": "remove", "path": "/spec/template/spec/containers/0/livenessProbe"}]'

# 위치 배열에 새 요소 추가
kubectl patch sa default --type='json' -p='[{"op": "add", "path": "/secrets/1", "value": {"name": "whatever" } }]'

7. 리소스 편집
kubectl edit svc/docker-registry                      # docker-registry라는 서비스 편집
KUBE_EDITOR="nano" kubectl edit svc/docker-registry   # 다른 편집기 사용

8. 리소스 스케일링
kubectl scale --replicas=3 rs/foo                                 # 'foo'라는 레플리카 셋을 3으로 스케일
kubectl scale --replicas=3 -f foo.yaml                            # "foo.yaml"에 지정된 리소스의 크기를 3으로 스케일
kubectl scale --current-replicas=2 --replicas=3 deployment/mysql  # mysql이라는 디플로이먼트의 현재 크기가 2인 경우, mysql을 3으로 스케일
kubectl scale --replicas=5 rc/foo rc/bar rc/baz                   # 여러 개의 레플리케이션 컨트롤러 스케일

9. 리소스 삭제
kubectl delete -f ./pod.json                                              # pod.json에 지정된 유형 및 이름을 사용하여 파드 삭제
kubectl delete pod,service baz foo                                        # "baz", "foo"와 동일한 이름을 가진 파드와 서비스 삭제
kubectl delete pods,services -l name=myLabel                              # name=myLabel 라벨을 가진 파드와 서비스 삭제
kubectl delete pods,services -l name=myLabel --include-uninitialized      # 초기화되지 않은 것을 포함하여, name=myLabel 라벨을 가진 파드와 서비스 삭제
kubectl -n my-ns delete po,svc --all                                      # 초기화되지 않은 것을 포함하여, my-ns 네임스페이스 내 모든 파드와 서비스 삭제

# awk pattern1 또는 pattern2에 매칭되는 모든 파드 삭제
kubectl get pods  -n mynamespace --no-headers=true | awk '/pattern1|pattern2/{print $1}' | xargs  kubectl delete -n mynamespace pod

10. 실행중인 파드와 상호 작용
kubectl logs my-pod                                 # 파드 로그(stdout) 덤프
kubectl logs -l name=myLabel                        # name이 myLabel인 파드 로그 덤프 (stdout)
kubectl logs my-pod --previous                      # 컨테이너의 이전 인스턴스 생성에 대한 파드 로그(stdout) 덤프
kubectl logs my-pod -c my-container                 # 파드 로그(stdout, 멀티-컨테이너 경우) 덤프
kubectl logs -l name=myLabel -c my-container        # name이 myLabel인 파드 로그 덤프 (stdout)
kubectl logs my-pod -c my-container --previous      # 컨테이너의 이전 인스턴스 생성에 대한 파드 로그(stdout, 멀티-컨테이너 경우) 덤프
kubectl logs -f my-pod                              # 실시간 스트림 파드 로그(stdout)
kubectl logs -f my-pod -c my-container              # 실시간 스트림 파드 로그(stdout, 멀티-컨테이너 경우)
kubectl logs -f -l name=myLabel --all-containers    # name이 myLabel인 모든 파드의 로그 스트리밍 (stdout)
kubectl run -i --tty busybox --image=busybox -- sh  # 대화형 셸로 파드를 실행
kubectl attach my-pod -i                            # 실행중인 컨테이너에 연결
kubectl port-forward my-pod 5000:6000               # 로컬 머신의 5000번 포트를 리스닝하고, my-pod의 6000번 포트로 전달
kubectl exec my-pod -- ls /                         # 기존 파드에서 명령 실행(한 개 컨테이너 경우)
kubectl exec my-pod -c my-container -- ls /         # 기존 파드에서 명령 실행(멀티-컨테이너 경우)
kubectl top pod POD_NAME --containers               # 특정 파드와 해당 컨테이너에 대한 메트릭 표시

11. 노드, 클러스터와 상호 작용
kubectl cordon my-node                                                # my-node를 스케줄링할 수 없도록 표기
kubectl drain my-node                                                 # 유지 보수를 위해서 my-node를 준비 상태로 비움
kubectl uncordon my-node                                              # my-node를 스케줄링할 수 있도록 표기
kubectl top node my-node                                              # 주어진 노드에 대한 메트릭 표시
kubectl cluster-info                                                  # 마스터 및 서비스의 주소 표시
kubectl cluster-info dump                                             # 현재 클러스터 상태를 stdout으로 덤프
kubectl cluster-info dump --output-directory=/path/to/cluster-state   # 현재 클러스터 상태를 /path/to/cluster-state으로 덤프

# key와 effect가 있는 테인트(taint)가 이미 존재하면, 그 값이 지정된 대로 대체된다.
kubectl taint nodes foo dedicated=special-user:NoSchedule

12. 리소스 타입
kubectl api-resources

kubectl api-resources --namespaced=true      # 네임스페이스를 가지는 모든 리소스
kubectl api-resources --namespaced=false     # 네임스페이스를 가지지 않는 모든 리소스
kubectl api-resources -o name                # 모든 리소스의 단순한 (리소스 이름 만) 출력
kubectl api-resources -o wide                # 모든 리소스의 확장된 ("wide"로 알려진) 출력
kubectl api-resources --verbs=list,get       # "list"와 "get"의 요청 동사를 지원하는 모든 리소스 출력
kubectl api-resources --api-group=extensions # "extensions" API 그룹의 모든 리소스

13. 출력 형식
# 쉼표로 구분된 사용자 정의 열 목록을 사용하여 테이블 출력
-o=custom-columns=<명세>

# <파일명>파일에서 사용자 정의 열 템플릿을 사용하여 테이블 출력
-o=custom-columns-file=<파일명>

# JSON 형식의 API 오브젝트 출력
-o=json

# jsonpath 표현식에 정의된 필드 출력
-o=jsonpath=<템플릿>

# <파일명> 파일에서 jsonpath 표현식에 정의된 필드 출력
-o=jsonpath-file=<파일명>

# 리소스 명만 출력하고 그 외에는 출력하지 않음
-o=name

# 추가 정보가 포함된 일반-텍스트 형식으로 출력하고, 파드의 경우 노드 명이 포함
-o=wide

# YAML 형식의 API 오브젝트 출력
-o=yaml


14. Kubectl 출력 로그 상세 레벨(verbosity)과 디버깅
# 일반적으로 클러스터 운영자(operator)에게 항상 보여지게 하기에는 유용함.
--v=0
# 자세한 정보를 원하지 않는 경우, 적절한 기본 로그 수준.
--v=1
# 서비스와 시스템의 중요한 변화와 관련이있는 중요한 로그 메시지에 대한 유용한 정상 상태 정보.
--v=2
# 변경 사항에 대한 확장 정보.
--v=3
# 디버그 수준 상세화.
--v=4
# 요청한 리소스를 표시.
--v=6
# HTTP 요청 헤더를 표시.
--v=7
# HTTP 요청 내용을 표시.
--v=8
# 내용을 잘라 내지 않고 HTTP 요청 내용을 표시.
--v=9

14. Common Commands
# Run curl test temporarily
kubectl run --rm mytest --image=yauritux/busybox-curl -it

# Run wget test temporarily
kubectl run --rm mytest --image=busybox -it

# Run nginx deployment with 2 replicas
kubectl run my-nginx --image=nginx --replicas=2 --port=80

# Run nginx pod and expose it
kubectl run my-nginx --restart=Never --image=nginx --port=80 --expose

# Run nginx deployment and expose it
kubectl run my-nginx --image=nginx --port=80 --expose

# Set namespace preference
kubectl config set-context <context_name> --namespace=<ns_name>

# List pods with nodes info
kubectl get pod -o wide

# List everything
kubectl get all --all-namespaces

# Get all services
kubectl get service --all-namespaces

# Get all deployments
kubectl get deployments --all-namespaces

# Show nodes with labels
kubectl get nodes --show-labels

# Get resources with json output
kubectl get pods --all-namespaces -o json

# Validate yaml file with dry run
kubectl create --dry-run --validate -f pod-dummy.yaml

# Start a temporary pod for testing
kubectl run --rm -i -t --image=alpine test-$RANDOM -- sh

# kubectl run shell command
kubectl exec -it mytest -- ls -l /etc/hosts

# Get system conf via configmap
kubectl -n kube-system get cm kubeadm-config -o yaml

# Get deployment yaml
kubectl -n denny-websites get deployment mysql -o yaml

# Explain resource
kubectl explain pods, kubectl explain svc

# Watch pods
kubectl get pods -n wordpress --watch

# Query healthcheck endpoint
curl -L http://127.0.0.1:10250/healthz

# Open a bash terminal in a pod
kubectl exec -it storage sh

# Check pod environment variables
kubectl exec redis-master-ft9ex env

# Enable kubectl shell autocompletion
echo "source <(kubectl completion bash)" >>~/.bashrc, and reload

# Use minikube dockerd in your laptop
eval $(minikube docker-env), No need to push docker hub any more

# Kubectl apply a folder of yaml files
kubectl apply -R -f .

# Get services sorted by name
kubectl get services –sort-by=.metadata.name

# Get pods sorted by restart count
kubectl get pods –sort-by=’.status.containerStatuses[0].restartCount’

# List pods and images
kubectl get pods -o=’custom-columns=PODS:.metadata.name,Images:.spec.containers[*].image’

# List all container images
list-all-images.sh

# kubeconfig skip tls verification
skip-tls-verify.md

15. Check Performance
# Get node resource usage
kubectl top node

# Get pod resource usage
kubectl top pod
# Get resource usage for a given pod
kubectl top <podname> --containers

#List resource utilization for all containers
kubectl top pod --all-namespaces --containers=true

16. Resources Deletion
# Delete pod
kubectl delete pod/<pod-name> -n <my-namespace>

# Delete pod by force
kubectl delete pod/<pod-name> --grace-period=0 --force

# Delete pods by labels
kubectl delete pod -l env=test

# Delete deployments by labels
kubectl delete deployment -l app=wordpress

# Delete all resources filtered by labels
kubectl delete pods,services -l name=myLabel

# Delete resources under a namespace
kubectl -n my-ns delete po,svc --all

# Delete persist volumes by labels
kubectl delete pvc -l app=wordpress

# Delete state fulset only (not pods)
kubectl delete sts/<stateful_set_name> --cascade=false

17. Log & Conf Files
# Config folder
/etc/kubernetes/

# Certificate files
/etc/kubernetes/pki/

# Credentials to API server
/etc/kubernetes/kubelet.conf

# Superuser credentials
/etc/kubernetes/admin.conf

# kubectl config file
~/.kube/config

# Kubernets working dir
/var/lib/kubelet/

# Docker working dir
/var/lib/docker/, /var/log/containers/

# Etcd working dir
/var/lib/etcd/

# Network cni
/etc/cni/net.d/

# Log files
/var/log/pods/

# log in worker node
/var/log/kubelet.log, /var/log/kube-proxy.log

# log in master node
kube-apiserver.log, kube-scheduler.log, kube-controller-manager.log

# Env
/etc/systemd/system/kubelet.service.d/10-kubeadm.conf

# Env
export KUBECONFIG=/etc/kubernetes/admin.conf

18. pods
# List all pods
kubectl get pods

# List pods for all namespace
kubectl get pods -all-namespaces

# List all critical pods
kubectl get -n kube-system pods -a

# List pods with more info
kubectl get pod -o wide, kubectl get pod/<pod-name> -o yaml

# Get pod info
kubectl describe pod/srv-mysql-server

# List all pods with labels
kubectl get pods --show-labels

# List all unhealthy pods
kubectl get pods –field-selector=status.phase!=Running –all-namespaces

# List running pods
kubectl get pods –field-selector=status.phase=Running

# Get Pod initContainer status
kubectl get pod --template '{{.status.initContainerStatuses}}' <pod-name>

# kubectl run command
kubectl exec -it -n “$ns” “$podname” – sh -c “echo $msg >>/dev/err.log”

# Watch pods
kubectl get pods -n wordpress --watch

# Get pod by selector
kubectl get pods –selector=”app=syslog” -o jsonpath=’{.items[*].metadata.name}’

# List pods and images
kubectl get pods -o=’custom-columns=PODS:.metadata.name,Images:.spec.containers[*].image’

# List pods and containers
-o=’custom-columns=PODS:.metadata.name,CONTAINERS:.spec.containers[*].name’

19. Label & Annontation
# Filter pods by label
kubectl get pods -l owner=denny

# Manually add label to a pod
kubectl label pods dummy-input owner=denny

# Remove label
kubectl label pods dummy-input owner-

# Manually add annonation to a pod
kubectl annotate pods dummy-input my-url=https://dennyzhang.com

20. Deployment & Scale
# Scale out
kubectl scale --replicas=3 deployment/nginx-app

# online rolling upgrade
kubectl rollout app-v1 app-v2 --image=img:v2

# Roll backup
kubectl rollout app-v1 app-v2 --rollback

# List rollout
kubectl get rs

# Check update status
kubectl rollout status deployment/nginx-app

# Check update history
kubectl rollout history deployment/nginx-app

# Pause/Resume
kubectl rollout pause deployment/nginx-deployment, resume

# Rollback to previous version
kubectl rollout undo deployment/nginx-deployment

21. Quota & Limits & Resource
# List Resource Quota
kubectl get resourcequota

# List Limit Range
kubectl get limitrange

# Customize resource definition
kubectl set resources deployment nginx -c=nginx --limits=cpu=200m

# Customize resource definition
kubectl set resources deployment nginx -c=nginx --limits=memory=512Mi

22. Service
# List all services
kubectl get services

# List service endpoints
kubectl get endpoints

# Get service detail
kubectl get service nginx-service -o yaml

# Get service cluster ip
kubectl get service nginx-service -o go-template=’{{.spec.clusterIP}}’

# Get service cluster port
kubectl get service nginx-service -o go-template=’{{(index .spec.ports 0).port}}’

# Expose deployment as lb service
kubectl expose deployment/my-app --type=LoadBalancer --name=my-service

# Expose service as lb service
kubectl expose service/wordpress-1-svc --type=LoadBalancer --name=ns1

23. Secrets
# List secrets
kubectl get secrets --all-namespaces

# Generate secret
echo -n 'mypasswd'=, then redirect to =base64 --decode

# Get secret
kubectl get secret denny-cluster-kubeconfig

# Get a specific field of a secret
kubectl get secret denny-cluster-kubeconfig -o jsonpath=”{.data.value}”

# Create secret from cfg file
kubectl create secret generic db-user-pass –from-file=./username.txt

24. StatefulSet
# List statefulset
kubectl get sts

# Delete statefulset only (not pods)
kubectl delete sts/<stateful_set_name> --cascade=false

# Scale statefulset
kubectl scale sts/<stateful_set_name> --replicas=5

25. Volumes & Volume Claims
# List storage class
kubectl get storageclass

# Check the mounted volumes
kubectl exec storage ls /data

# Check persist volume
kubectl describe pv/pv0001

# Copy local file to pod
kubectl cp /tmp/my <some-namespace>/<some-pod>:/tmp/server

# Copy pod file to local
kubectl cp <some-namespace>/<some-pod>:/tmp/server /tmp/my

26. Events & Metrics
# View all events
kubectl get events --all-namespaces

# List Events sorted by timestamp
kubectl get events –sort-by=.metadata.creationTimestamp

27. Node Maintenance
# Mark node as unschedulable
kubectl cordon $NDOE_NAME

# Mark node as schedulable
kubectl uncordon $NDOE_NAME

#Drain node in preparation for maintenance
kubectl drain $NDOE_NAME

28. Namespace & Security
# List authenticated contexts
kubectl config get-contexts, ~/.kube/config

# Set namespace preference
kubectl config set-context <context_name> --namespace=<ns_name>

# Load context from config file
kubectl get cs --kubeconfig kube_config.yml

# Switch context
kubectl config use-context <cluster-name>

# Delete the specified context
kubectl config delete-context <cluster-name>

# List all namespaces defined
kubectl get namespaces

# List certificates
kubectl get csr

29. Network
# Temporarily add a port-forwarding
kubectl port-forward redis-134 6379:6379

# Add port-forwaring for deployment
kubectl port-forward deployment/redis-master 6379:6379

# Add port-forwaring for replicaset
kubectl port-forward rs/redis-master 6379:6379

# Add port-forwaring for service
kubectl port-forward svc/redis-master 6379:6379

# Get network policy
kubectl get NetworkPolicy

30. Patch
# Patch service to loadbalancer
=kubectl patch svc $svc_name -p ‘{“spec”: {“type”: “LoadBalancer”}}’=

31. Extenstions
# List api group
kubectl api-versions

# List all CRD
kubectl get crd

# List storageclass
kubectl get storageclass

# List all supported resources
kubectl api-resources
